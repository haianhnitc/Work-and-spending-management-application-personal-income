import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:task_expense_manager/features/expense/presentation/controllers/expense_controller.dart';
import 'package:task_expense_manager/features/task/presentation/controllers/task_controller.dart';
import 'package:task_expense_manager/features/budget/presentation/controllers/budget_controller.dart';
import '../../core/services/ai_service.dart';
import '../../core/utils/snackbar_helper.dart';
import 'models/chat_message.dart';

class AIController extends GetxController {
  late final AIService _aiService;
  late final TaskController _taskController;
  late final ExpenseController _expenseController;
  late final BudgetController _budgetController;

  final RxString expenseAnalysis = ''.obs;
  final RxString taskAnalysis = ''.obs;
  final RxString smartSuggestions = ''.obs;

  final RxBool isLoading = false.obs;
  final RxBool isExpenseLoading = false.obs;
  final RxBool isTaskLoading = false.obs;
  final RxBool isPredictiveLoading = false.obs;

  final RxBool isInitialized = false.obs;
  final RxMap<String, dynamic> predictiveData = <String, dynamic>{}.obs;

  final RxList<ChatMessage> chatMessages = <ChatMessage>[].obs;
  final RxBool isChatLoading = false.obs;
  final TextEditingController chatTextController = TextEditingController();
  final ScrollController chatScrollController = ScrollController();

  @override
  void onInit() {
    super.onInit();
    Future.delayed(Duration.zero, () {
      _initializeServices();
    });
  }

  void _initializeServices() {
    try {
      _aiService = Get.find<AIService>();
      _taskController = Get.find<TaskController>();
      _expenseController = Get.find<ExpenseController>();
      _budgetController = Get.find<BudgetController>();

      // Set controllers for AI service to access user data
      _aiService.setControllers(
        taskController: _taskController,
        expenseController: _expenseController,
        budgetController: _budgetController,
      );

      isInitialized.value = true;

      _generateDailySuggestions();
      _initializeChat();
    } catch (e) {
      print('‚ùå L·ªói kh·ªüi t·∫°o AIController: $e');
      isInitialized.value = false;

      Future.delayed(Duration(milliseconds: 500), () {
        if (Get.context != null) {
          SnackbarHelper.showInfo('AI Service ƒëang ƒë∆∞·ª£c kh·ªüi t·∫°o...');
        }
      });
    }
  }

  Future<void> analyzeExpenses() async {
    if (!isInitialized.value) {
      _showInitializationError();
      return;
    }

    isExpenseLoading.value = true;
    try {
      final analysis =
          await _aiService.analyzeExpenses(_expenseController.expenses);
      expenseAnalysis.value = analysis;

      SnackbarHelper.showSuccess('ƒê√£ ho√†n th√†nh ph√¢n t√≠ch chi ti√™u');
    } catch (e) {
      _showError('Kh√¥ng th·ªÉ ph√¢n t√≠ch chi ti√™u: $e');
    } finally {
      isExpenseLoading.value = false;
    }
  }

  Future<void> analyzeTasks() async {
    if (!isInitialized.value) {
      _showInitializationError();
      return;
    }

    isTaskLoading.value = true;
    try {
      final analysis = await _aiService.analyzeTasks(_taskController.tasks);
      taskAnalysis.value = analysis;

      SnackbarHelper.showSuccess('ƒê√£ ho√†n th√†nh ph√¢n t√≠ch c√¥ng vi·ªác');
    } catch (e) {
      _showError('Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¥ng vi·ªác: $e');
    } finally {
      isTaskLoading.value = false;
    }
  }

  Future<void> generateSmartSuggestions() async {
    if (!isInitialized.value) {
      _showInitializationError();
      return;
    }

    isLoading.value = true;
    try {
      final suggestions = await _aiService.getSmartSuggestions(
        _taskController.tasks,
        _expenseController.expenses,
      );
      smartSuggestions.value = suggestions;

      SnackbarHelper.showInfo('ƒê√£ t·∫°o g·ª£i √Ω m·ªõi t·ª´ AI');
    } catch (e) {
      _showError('Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω: $e');
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> getPredictiveAnalysis() async {
    if (!isInitialized.value) {
      _showInitializationError();
      return;
    }

    isPredictiveLoading.value = true;
    try {
      final analysis = await _aiService.getPredictiveAnalysis(
        _taskController.tasks,
        _expenseController.expenses,
      );
      predictiveData.value = analysis;

      SnackbarHelper.showSuccess('ƒê√£ ph√¢n t√≠ch xu h∆∞·ªõng v√† d·ª± ƒëo√°n');
    } catch (e) {
      _showError('Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ª± ƒëo√°n: $e');
    } finally {
      isPredictiveLoading.value = false;
    }
  }

  void _generateDailySuggestions() {
    if (!isInitialized.value) return;

    Future.delayed(Duration(seconds: 2), () {
      if (isInitialized.value) {
        generateSmartSuggestions();
      }
    });
  }

  String getContextualSuggestion() {
    final hour = DateTime.now().hour;

    if (hour >= 6 && hour < 9) {
      return "üåÖ Bu·ªïi s√°ng t·ªët l√†nh! ƒê√¢y l√† th·ªùi ƒëi·ªÉm l√Ω t∆∞·ªüng ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch v√† b·∫Øt ƒë·∫ßu c√°c c√¥ng vi·ªác quan tr·ªçng. H√£y ki·ªÉm tra danh s√°ch task h√¥m nay v√† ∆∞u ti√™n 2-3 vi·ªác quan tr·ªçng nh·∫•t.";
    } else if (hour >= 9 && hour < 12) {
      return "‚òï Th·ªùi gian v√†ng cho c√¥ng vi·ªác! NƒÉng su·∫•t cao nh·∫•t trong ng√†y. T·∫≠p trung ho√†n th√†nh deep work, t·∫Øt th√¥ng b√°o ƒë·ªÉ kh√¥ng b·ªã ph√¢n t√¢m. Nh·ªõ ghi l·∫°i chi ti√™u n·∫øu c√≥.";
    } else if (hour >= 12 && hour < 14) {
      return "üçΩÔ∏è Gi·ªù ngh·ªâ tr∆∞a! Th·ªùi gian th∆∞ gi√£n v√† n·∫°p nƒÉng l∆∞·ª£ng. ƒê√¢y c≈©ng l√† l√∫c t·ªët ƒë·ªÉ review c√¥ng vi·ªác bu·ªïi s√°ng v√† l√™n k·∫ø ho·∫°ch cho bu·ªïi chi·ªÅu. Nh·ªõ ghi chi ti√™u ƒÉn tr∆∞a nh√©!";
    } else if (hour >= 14 && hour < 18) {
      return "üöÄ Bu·ªïi chi·ªÅu nƒÉng ƒë·ªông! Th·ªùi gian x·ª≠ l√Ω email, meeting v√† ho√†n th√†nh c√°c task c√≤n l·∫°i. C√≥ th·ªÉ brainstorm v√† l√†m vi·ªác nh√≥m hi·ªáu qu·∫£. Ki·ªÉm tra ti·∫øn ƒë·ªô c√¥ng vi·ªác.";
    } else if (hour >= 18 && hour < 21) {
      return "üè† Th·ªùi gian c√¢n b·∫±ng! K·∫øt th√∫c c√¥ng vi·ªác, d√†nh th·ªùi gian cho b·∫£n th√¢n v√† gia ƒë√¨nh. ƒê√¢y l√† l√∫c t·ªët ƒë·ªÉ t·ªïng k·∫øt chi ti√™u trong ng√†y v√† chu·∫©n b·ªã cho ng√†y mai.";
    } else {
      return "üåô Bu·ªïi t·ªëi y√™n b√¨nh! Th·ªùi gian th∆∞ gi√£n, ƒë·ªçc s√°ch ho·∫∑c h·ªçc k·ªπ nƒÉng m·ªõi. Review to√†n b·ªô ng√†y h√¥m nay - c√¥ng vi·ªác ƒë√£ ho√†n th√†nh v√† chi ti√™u. L·∫≠p k·∫ø ho·∫°ch c·ª• th·ªÉ cho ng√†y mai.";
    }
  }

  void _showError(String message) {
    SnackbarHelper.showError(message);
  }

  void _showInitializationError() {
    SnackbarHelper.showInfo('AI Service ƒëang ƒë∆∞·ª£c kh·ªüi t·∫°o, vui l√≤ng ƒë·ª£i...');
  }

  void _initializeChat() {
    chatMessages.add(ChatMessage.ai(
      "ü§ñ Xin ch√†o! T√¥i l√† AI Assistant th√¥ng minh c·ªßa b·∫°n!\n\n"
      "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
      "üí∞ Ph√¢n t√≠ch chi ti√™u d·ª±a tr√™n d·ªØ li·ªáu th·ª±c c·ªßa b·∫°n\n"
      "‚ö° Qu·∫£n l√Ω c√¥ng vi·ªác hi·ªáu qu·∫£ theo l·ªãch tr√¨nh\n"
      "üéØ Theo d√µi ng√¢n s√°ch v√† ƒë∆∞a ra g·ª£i √Ω ti·∫øt ki·ªám\n"
      "üìä D·ª± ƒëo√°n xu h∆∞·ªõng t√†i ch√≠nh c√° nh√¢n\n"
      "üí¨ Tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n ng·ªØ c·∫£nh c·ªßa b·∫°n\n\n"
      "T√¥i ƒë√£ truy c·∫≠p ƒë∆∞·ª£c d·ªØ li·ªáu task, chi ti√™u v√† ng√¢n s√°ch c·ªßa b·∫°n ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ch√≠nh x√°c. B·∫°n mu·ªën t√¥i h·ªó tr·ª£ g√¨ h√¥m nay?",
    ));
  }

  Future<void> sendChatMessage(String message) async {
    if (message.trim().isEmpty) return;

    chatMessages.add(ChatMessage.user(message.trim()));

    chatTextController.clear();
    _scrollToBottom();

    isChatLoading.value = true;
    final typingMessage = ChatMessage.typing();
    chatMessages.add(typingMessage);
    _scrollToBottom();

    try {
      final response = await _aiService.getChatResponse(message.trim());

      chatMessages.removeWhere((msg) => msg.type == MessageType.typing);

      final aiMessage =
          response.isNotEmpty ? response : _getDefaultResponse(message);
      chatMessages.add(ChatMessage.ai(aiMessage));
    } catch (e) {
      print('‚ùå L·ªói chat: $e');
      chatMessages.removeWhere((msg) => msg.type == MessageType.typing);

      chatMessages.add(ChatMessage.ai(_getDefaultResponse(message)));
    }

    isChatLoading.value = false;
    _scrollToBottom();
  }

  String _getDefaultResponse(String message) {
    final lowercaseMessage = message.toLowerCase();

    if (lowercaseMessage.contains('xin ch√†o') ||
        lowercaseMessage.contains('hello') ||
        lowercaseMessage.contains('hi')) {
      return "ü§ñ Xin ch√†o! T√¥i l√† AI Assistant c·ªßa b·∫°n!\n\n"
          "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n qu·∫£n l√Ω t√†i ch√≠nh v√† c√¥ng vi·ªác th√¥ng minh.\n"
          "H√¥m nay t√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho b·∫°n?";
    }

    return "ü§î Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t t·∫°m th·ªùi!\n\n"
        "Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c m√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ nh·ªØng g√¨ b·∫°n c·∫ßn h·ªó tr·ª£.\n\n"
        "üí° T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
        "‚Ä¢ Ph√¢n t√≠ch chi ti√™u v√† ƒë∆∞a ra g·ª£i √Ω ti·∫øt ki·ªám\n"
        "‚Ä¢ Qu·∫£n l√Ω c√¥ng vi·ªác hi·ªáu qu·∫£\n"
        "‚Ä¢ D·ª± ƒëo√°n xu h∆∞·ªõng t√†i ch√≠nh";
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (chatScrollController.hasClients) {
        chatScrollController.animateTo(
          chatScrollController.position.maxScrollExtent,
          duration: Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  void clearChat() {
    chatMessages.clear();
    _initializeChat();
  }

  @override
  void onClose() {
    chatTextController.dispose();
    chatScrollController.dispose();
    super.onClose();
  }
}
