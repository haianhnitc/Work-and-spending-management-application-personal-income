import 'package:get/get.dart';
import 'package:share_plus/share_plus.dart';
import 'package:intl/intl.dart';
import '../../core/utils/snackbar_helper.dart';
import '../expense/presentation/controllers/expense_controller.dart';
import '../task/presentation/controllers/task_controller.dart';
import '../budget/presentation/controllers/budget_controller.dart';

class ReportController extends GetxController {
  final ExpenseController _expenseController = Get.find<ExpenseController>();
  final TaskController _taskController = Get.find<TaskController>();
  final BudgetController _budgetController = Get.find<BudgetController>();

  final RxBool isExporting = false.obs;

  Future<void> exportExpenseReport() async {
    try {
      isExporting.value = true;

      final expenses = _expenseController.filteredExpenses;
      final totalExpense = _expenseController.totalExpense;
      final totalIncome = _expenseController.totalIncome;

      final report =
          _generateExpenseReport(expenses, totalExpense, totalIncome);

      await Share.share(report);

      SnackbarHelper.showSuccess('ƒê√£ chia s·∫ª b√°o c√°o chi ti√™u');
    } catch (e) {
      SnackbarHelper.showError('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: $e');
    } finally {
      isExporting.value = false;
    }
  }

  Future<void> exportTaskReport() async {
    try {
      isExporting.value = true;

      final tasks = _taskController.tasks;
      final completedTasks = tasks.where((t) => t.isCompleted).length;
      final pendingTasks = tasks.length - completedTasks;

      final report =
          _generateTaskReport(tasks.toList(), completedTasks, pendingTasks);

      await Share.share(report);

      SnackbarHelper.showSuccess('ƒê√£ chia s·∫ª b√°o c√°o c√¥ng vi·ªác');
    } catch (e) {
      SnackbarHelper.showError('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: $e');
    } finally {
      isExporting.value = false;
    }
  }

  Future<void> exportBudgetReport() async {
    try {
      isExporting.value = true;

      final budgets = _budgetController.budgets;

      final report = _generateBudgetReport(budgets.toList());

      await Share.share(report);

      SnackbarHelper.showSuccess('ƒê√£ chia s·∫ª b√°o c√°o ng√¢n s√°ch');
    } catch (e) {
      SnackbarHelper.showError('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: $e');
    } finally {
      isExporting.value = false;
    }
  }

  Future<void> exportFullReport() async {
    try {
      isExporting.value = true;

      final expenses = _expenseController.filteredExpenses;
      final tasks = _taskController.tasks.toList();
      final budgets = _budgetController.budgets.toList();

      final report = _generateFullReport(expenses, tasks, budgets);

      await Share.share(report);

      SnackbarHelper.showSuccess('ƒê√£ chia s·∫ª b√°o c√°o t·ªïng h·ª£p');
    } catch (e) {
      SnackbarHelper.showError('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: $e');
    } finally {
      isExporting.value = false;
    }
  }

  String _generateExpenseReport(
      dynamic expenses, double totalExpense, double totalIncome) {
    final balance = totalIncome - totalExpense;
    final now = DateTime.now();

    return '''
üìä B√ÅO C√ÅO CHI TI√äU
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìÖ Ng√†y t·∫°o: ${DateFormat('dd/MM/yyyy HH:mm').format(now)}
üìà Kho·∫£ng th·ªùi gian: ${_expenseController.timeFilter.value}

üí∞ T·ªîNG QUAN:
‚Ä¢ T·ªïng thu nh·∫≠p: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(totalIncome)}
‚Ä¢ T·ªïng chi ti√™u: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(totalExpense)}
‚Ä¢ S·ªë d∆∞: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(balance)}

üìä TH·ªêNG K√ä:
‚Ä¢ S·ªë giao d·ªãch: ${expenses.length}
‚Ä¢ Trung b√¨nh/giao d·ªãch: ${expenses.isNotEmpty ? NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format((totalExpense + totalIncome) / expenses.length) : '0 VNƒê'}

${balance >= 0 ? '‚úÖ T√¨nh h√¨nh t√†i ch√≠nh ·ªïn ƒë·ªãnh' : '‚ö†Ô∏è C·∫ßn c√¢n nh·∫Øc ti·∫øt ki·ªám'}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ƒê∆∞·ª£c t·∫°o b·ªüi Task & Expense Manager
''';
  }

  String _generateTaskReport(dynamic tasks, int completed, int pending) {
    final now = DateTime.now();
    final completionRate =
        tasks.isNotEmpty ? (completed / tasks.length * 100) : 0;

    return '''
‚úÖ B√ÅO C√ÅO C√îNG VI·ªÜC
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìÖ Ng√†y t·∫°o: ${DateFormat('dd/MM/yyyy HH:mm').format(now)}

üìà T·ªîNG QUAN:
‚Ä¢ T·ªïng c√¥ng vi·ªác: ${tasks.length}
‚Ä¢ ƒê√£ ho√†n th√†nh: $completed
‚Ä¢ ƒêang th·ª±c hi·ªán: $pending
‚Ä¢ T·ª∑ l·ªá ho√†n th√†nh: ${completionRate.toStringAsFixed(1)}%

üíº ƒê√ÅNH GI√Å:
${completionRate >= 80 ? 'üåü NƒÉng su·∫•t xu·∫•t s·∫Øc!' : completionRate >= 60 ? 'üëç NƒÉng su·∫•t t·ªët' : 'üìã C·∫ßn c·∫£i thi·ªán nƒÉng su·∫•t'}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ƒê∆∞·ª£c t·∫°o b·ªüi Task & Expense Manager
''';
  }

  String _generateBudgetReport(dynamic budgets) {
    final now = DateTime.now();
    final activeBudgets = budgets.where((b) => b.isActive).length;
    final totalBudget = budgets.fold(0.0, (sum, b) => sum + b.amount);
    final totalSpent = budgets.fold(0.0, (sum, b) => sum + b.spentAmount);

    return '''
üí∞ B√ÅO C√ÅO NG√ÇN S√ÅCH
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìÖ Ng√†y t·∫°o: ${DateFormat('dd/MM/yyyy HH:mm').format(now)}

üìä T·ªîNG QUAN:
‚Ä¢ T·ªïng ng√¢n s√°ch: ${activeBudgets}
‚Ä¢ T·ªïng s·ªë ti·ªÅn d·ª± ki·∫øn: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(totalBudget)}
‚Ä¢ T·ªïng s·ªë ti·ªÅn ƒë√£ chi: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(totalSpent)}
‚Ä¢ C√≤n l·∫°i: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(totalBudget - totalSpent)}

üìà HI·ªÜU SU·∫§T:
‚Ä¢ T·ª∑ l·ªá s·ª≠ d·ª•ng: ${totalBudget > 0 ? (totalSpent / totalBudget * 100).toStringAsFixed(1) : 0}%

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ƒê∆∞·ª£c t·∫°o b·ªüi Task & Expense Manager
''';
  }

  String _generateFullReport(dynamic expenses, dynamic tasks, dynamic budgets) {
    final now = DateTime.now();
    final totalExpense = _expenseController.totalExpense;
    final totalIncome = _expenseController.totalIncome;
    final balance = totalIncome - totalExpense;
    final completedTasks = tasks.where((t) => t.isCompleted).length;

    return '''
üìã B√ÅO C√ÅO T·ªîNG H·ª¢P
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìÖ Ng√†y t·∫°o: ${DateFormat('dd/MM/yyyy HH:mm').format(now)}

üí∞ T√ÄI CH√çNH:
‚Ä¢ Thu nh·∫≠p: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(totalIncome)}
‚Ä¢ Chi ti√™u: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(totalExpense)}
‚Ä¢ S·ªë d∆∞: ${NumberFormat.currency(locale: 'vi_VN', symbol: 'VNƒê').format(balance)}

‚úÖ C√îNG VI·ªÜC:
‚Ä¢ T·ªïng task: ${tasks.length}
‚Ä¢ Ho√†n th√†nh: $completedTasks
‚Ä¢ T·ª∑ l·ªá: ${tasks.isNotEmpty ? (completedTasks / tasks.length * 100).toStringAsFixed(1) : 0}%

üí∞ NG√ÇN S√ÅCH:
‚Ä¢ S·ªë ng√¢n s√°ch: ${budgets.length}
‚Ä¢ ƒêang ho·∫°t ƒë·ªông: ${budgets.where((b) => b.isActive).length}

üéØ ƒê√ÅNH GI√Å T·ªîNG QUAN:
${_getOverallAssessment(balance, completedTasks, tasks.length)}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ƒê∆∞·ª£c t·∫°o b·ªüi Task & Expense Manager
''';
  }

  String _getOverallAssessment(double balance, int completed, int total) {
    final financialHealth = balance >= 0;
    final productivityRate = total > 0 ? completed / total : 0;

    if (financialHealth && productivityRate >= 0.8) {
      return 'üåü Xu·∫•t s·∫Øc! T√†i ch√≠nh ·ªïn ƒë·ªãnh v√† nƒÉng su·∫•t cao.';
    } else if (financialHealth && productivityRate >= 0.6) {
      return 'üëç T·ªët! T√†i ch√≠nh ·ªïn ƒë·ªãnh, nƒÉng su·∫•t kh√° t·ªët.';
    } else if (financialHealth) {
      return 'üí∞ T√†i ch√≠nh ·ªïn ƒë·ªãnh nh∆∞ng c·∫ßn c·∫£i thi·ªán nƒÉng su·∫•t.';
    } else if (productivityRate >= 0.8) {
      return '‚ö° NƒÉng su·∫•t cao nh∆∞ng c·∫ßn c·∫£i thi·ªán t√†i ch√≠nh.';
    } else {
      return 'üìà C·∫ßn c·∫£i thi·ªán c·∫£ t√†i ch√≠nh v√† nƒÉng su·∫•t.';
    }
  }
}
