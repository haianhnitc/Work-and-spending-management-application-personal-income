import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:get/get.dart';
import 'package:task_expense_manager/core/constants/app_enums.dart';
import '../utils/env_config.dart';
import '../../features/task/data/models/task_model.dart';
import '../../features/expense/data/models/expense_model.dart';
import '../../features/budget/data/models/budget_model.dart';
import '../../features/task/presentation/controllers/task_controller.dart';
import '../../features/expense/presentation/controllers/expense_controller.dart';
import '../../features/budget/presentation/controllers/budget_controller.dart';

class AIService extends GetxService {
  late GenerativeModel _model;

  TaskController? _taskController;
  ExpenseController? _expenseController;
  BudgetController? _budgetController;

  @override
  void onInit() {
    super.onInit();
  }

  static Future<void> initialize() async {
    final instance = Get.find<AIService>();
    instance._initializeAI();
  }

  void setControllers({
    TaskController? taskController,
    ExpenseController? expenseController,
    BudgetController? budgetController,
  }) {
    _taskController = taskController;
    _expenseController = expenseController;
    _budgetController = budgetController;
  }

  void _initializeAI() {
    final apiKey = EnvConfig.get('GEMINI_API_KEY');
    if (apiKey == null || apiKey.isEmpty) {
      throw Exception('GEMINI_API_KEY not found in environment variables');
    }

    final modelName = EnvConfig.geminiModel;
    print('üîß Using model: $modelName');

    _model = GenerativeModel(
      model: modelName,
      apiKey: apiKey,
    );
  }

  Future<String> analyzeExpenses(List<ExpenseModel> expenses) async {
    return _executeWithRetry(() async {
      final expenseData = _formatExpenseData(expenses);

      final prompt = '''
      Ph√¢n t√≠ch d·ªØ li·ªáu chi ti√™u sau v√† ƒë∆∞a ra g·ª£i √Ω ti·∫øt ki·ªám:
      
      $expenseData
      
      H√£y ƒë∆∞a ra:
      1. Nh·∫≠n x√©t v·ªÅ th√≥i quen chi ti√™u (2-3 c√¢u)
      2. C√°c kho·∫£n chi ti√™u c√≥ th·ªÉ c·∫Øt gi·∫£m (2-3 g·ª£i √Ω)
      3. G·ª£i √Ω ti·∫øt ki·ªám c·ª• th·ªÉ (2-3 g·ª£i √Ω)
      4. D·ª± ƒëo√°n chi ti√™u th√°ng t·ªõi
      
      Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu. Kh√¥ng qu√° 200 t·ª´.
      ''';

      final content = [Content.text(prompt)];
      final response = await _model.generateContent(content);

      return response.text ?? 'Kh√¥ng th·ªÉ ph√¢n t√≠ch ƒë∆∞·ª£c d·ªØ li·ªáu';
    }, 'ph√¢n t√≠ch chi ti√™u');
  }

  Future<String> analyzeTasks(List<TaskModel> tasks) async {
    return _executeWithRetry(() async {
      final taskData = _formatTaskData(tasks);

      final prompt = '''
      Ph√¢n t√≠ch d·ªØ li·ªáu c√¥ng vi·ªác sau v√† ƒë∆∞a ra g·ª£i √Ω qu·∫£n l√Ω th·ªùi gian:
      
      $taskData
      
      H√£y ƒë∆∞a ra:
      1. ƒê√°nh gi√° hi·ªáu su·∫•t l√†m vi·ªác (2-3 c√¢u)
      2. C√¥ng vi·ªác ∆∞u ti√™n c·∫ßn l√†m (2-3 g·ª£i √Ω)
      3. G·ª£i √Ω ph√¢n b·ªï th·ªùi gian (2-3 g·ª£i √Ω)
      4. C·∫£i thi·ªán nƒÉng su·∫•t
      
      Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† th·ª±c t·∫ø. Kh√¥ng qu√° 200 t·ª´.
      ''';

      final content = [Content.text(prompt)];
      final response = await _model.generateContent(content);

      return response.text ?? 'Kh√¥ng th·ªÉ ph√¢n t√≠ch ƒë∆∞·ª£c d·ªØ li·ªáu';
    }, 'ph√¢n t√≠ch c√¥ng vi·ªác');
  }

  Future<String> getSmartSuggestions(
      List<TaskModel> tasks, List<ExpenseModel> expenses) async {
    return _executeWithRetry(() async {
      final currentHour = DateTime.now().hour;
      final dayOfWeek = DateTime.now().weekday;

      final prompt = '''
      Hi·ªán t·∫°i l√† ${_getTimeContext(currentHour, dayOfWeek)}.
      
      D·ªØ li·ªáu ng∆∞·ªùi d√πng:
      - C√¥ng vi·ªác: ${_formatTaskData(tasks)}
      - Chi ti√™u: ${_formatExpenseData(expenses)}
      
      D·ª±a v√†o th·ªùi gian hi·ªán t·∫°i v√† d·ªØ li·ªáu, h√£y ƒë∆∞a ra 3-5 g·ª£i √Ω c·ª• th·ªÉ:
      1. C√¥ng vi·ªác n√™n l√†m ngay
      2. L·ªùi nh·∫Øc v·ªÅ chi ti√™u
      3. Ho·∫°t ƒë·ªông ph√π h·ª£p v·ªõi th·ªùi gian
      
      Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th·ª±c t·∫ø b·∫±ng ti·∫øng Vi·ªát. Kh√¥ng qu√° 150 t·ª´.
      ''';

      final content = [Content.text(prompt)];
      final response = await _model.generateContent(content);

      return response.text ?? 'Kh√¥ng c√≥ g·ª£i √Ω ph√π h·ª£p';
    }, 't·∫°o g·ª£i √Ω th√¥ng minh');
  }

  Future<Map<String, dynamic>> getPredictiveAnalysis(
      List<TaskModel> tasks, List<ExpenseModel> expenses) async {
    try {
      final prompt = '''
      Ph√¢n t√≠ch xu h∆∞·ªõng v√† d·ª± ƒëo√°n d·ª±a tr√™n d·ªØ li·ªáu sau:
      
      C√¥ng vi·ªác: ${_formatTaskData(tasks)}
      Chi ti√™u: ${_formatExpenseData(expenses)}
      
      H√£y tr·∫£ v·ªÅ ph√¢n t√≠ch b·∫±ng ti·∫øng Vi·ªát theo format sau:
      - Xu h∆∞·ªõng nƒÉng su·∫•t: (tƒÉng/gi·∫£m/·ªïn ƒë·ªãnh)
      - Xu h∆∞·ªõng chi ti√™u: (tƒÉng/gi·∫£m/·ªïn ƒë·ªãnh)
      - D·ª± ƒëo√°n chi ti√™u th√°ng t·ªõi: (s·ªë ti·ªÅn ∆∞·ªõc t√≠nh)
      - T·ª∑ l·ªá ho√†n th√†nh c√¥ng vi·ªác: (%)
      - 3 khuy·∫øn ngh·ªã quan tr·ªçng
      
      Tr·∫£ l·ªùi ng·∫Øn g·ªçn, kh√¥ng qu√° 150 t·ª´.
      ''';

      final content = [Content.text(prompt)];
      final response = await _model.generateContent(content);

      return {
        'analysis': response.text ?? 'Kh√¥ng th·ªÉ ph√¢n t√≠ch',
        'timestamp': DateTime.now().toIso8601String(),
      };
    } catch (e) {
      print("L·ªói n√®: ${e}");
      return {'error': 'L·ªói ph√¢n t√≠ch: Vui l√≤ng th·ª≠ l·∫°i sau'};
    }
  }

  String _formatExpenseData(List<ExpenseModel> expenses) {
    if (expenses.isEmpty) return 'Ch∆∞a c√≥ d·ªØ li·ªáu chi ti√™u';

    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final yesterday = today.subtract(Duration(days: 1));
    final thisWeekStart = today.subtract(Duration(days: now.weekday - 1));
    final thisMonthStart = DateTime(now.year, now.month, 1);
    final lastMonthStart = DateTime(now.year, now.month - 1, 1);

    final todayExpenses = expenses.where((e) {
      final expenseDate = DateTime(e.date.year, e.date.month, e.date.day);
      return expenseDate.isAtSameMomentAs(today);
    }).toList();

    final yesterdayExpenses = expenses.where((e) {
      final expenseDate = DateTime(e.date.year, e.date.month, e.date.day);
      return expenseDate.isAtSameMomentAs(yesterday);
    }).toList();

    final thisWeekExpenses = expenses
        .where((e) => e.date.isAfter(thisWeekStart.subtract(Duration(days: 1))))
        .toList();

    final thisMonthExpenses = expenses
        .where(
            (e) => e.date.isAfter(thisMonthStart.subtract(Duration(days: 1))))
        .toList();

    final lastMonthExpenses = expenses
        .where((e) =>
            e.date.isAfter(lastMonthStart.subtract(Duration(days: 1))) &&
            e.date.isBefore(thisMonthStart))
        .toList();

    final todayAmount = todayExpenses.fold(0.0, (sum, e) => sum + e.amount);
    final yesterdayAmount =
        yesterdayExpenses.fold(0.0, (sum, e) => sum + e.amount);
    final thisWeekAmount =
        thisWeekExpenses.fold(0.0, (sum, e) => sum + e.amount);
    final thisMonthAmount =
        thisMonthExpenses.fold(0.0, (sum, e) => sum + e.amount);
    final lastMonthAmount =
        lastMonthExpenses.fold(0.0, (sum, e) => sum + e.amount);

    final todayExpenseOnly = todayExpenses
        .where((e) => e.incomeType == IncomeType.none)
        .fold(0.0, (sum, e) => sum + e.amount);
    final todayIncomeOnly = todayExpenses
        .where((e) => e.incomeType != IncomeType.none)
        .fold(0.0, (sum, e) => sum + e.amount);

    final thisMonthExpenseOnly = thisMonthExpenses
        .where((e) => e.incomeType == IncomeType.none)
        .fold(0.0, (sum, e) => sum + e.amount);
    final thisMonthIncomeOnly = thisMonthExpenses
        .where((e) => e.incomeType != IncomeType.none)
        .fold(0.0, (sum, e) => sum + e.amount);

    final recentTransactions = expenses.take(5).toList();

    final buffer = StringBuffer();

    buffer.writeln('üìä T·ªîNG QUAN THEO TH·ªúI GIAN:');
    buffer.writeln(
        '‚Ä¢ H√¥m nay (${now.day}/${now.month}): ${_formatMoney(todayAmount)} (${todayExpenses.length} giao d·ªãch)');
    if (todayExpenses.isNotEmpty) {
      buffer.writeln('  - Chi ti√™u: ${_formatMoney(todayExpenseOnly)}');
      buffer.writeln('  - Thu nh·∫≠p: ${_formatMoney(todayIncomeOnly)}');
    }

    buffer.writeln(
        '‚Ä¢ H√¥m qua: ${_formatMoney(yesterdayAmount)} (${yesterdayExpenses.length} giao d·ªãch)');
    buffer.writeln(
        '‚Ä¢ Tu·∫ßn n√†y: ${_formatMoney(thisWeekAmount)} (${thisWeekExpenses.length} giao d·ªãch)');
    buffer.writeln(
        '‚Ä¢ Th√°ng n√†y: ${_formatMoney(thisMonthAmount)} (${thisMonthExpenses.length} giao d·ªãch)');
    if (thisMonthExpenses.isNotEmpty) {
      buffer.writeln('  - Chi ti√™u: ${_formatMoney(thisMonthExpenseOnly)}');
      buffer.writeln('  - Thu nh·∫≠p: ${_formatMoney(thisMonthIncomeOnly)}');
      buffer.writeln(
          '  - C√≤n l·∫°i: ${_formatMoney(thisMonthIncomeOnly - thisMonthExpenseOnly)}');
    }
    buffer.writeln(
        '‚Ä¢ Th√°ng tr∆∞·ªõc: ${_formatMoney(lastMonthAmount)} (${lastMonthExpenses.length} giao d·ªãch)');

    final monthlyCategories = <String, double>{};
    for (var expense
        in thisMonthExpenses.where((e) => e.incomeType == IncomeType.none)) {
      monthlyCategories[expense.category] =
          (monthlyCategories[expense.category] ?? 0) + expense.amount;
    }

    if (monthlyCategories.isNotEmpty) {
      buffer.writeln('\nüìã CHI TI√äU THEO DANH M·ª§C (Th√°ng n√†y):');
      final sortedCategories = monthlyCategories.entries.toList()
        ..sort((a, b) => b.value.compareTo(a.value));
      for (final entry in sortedCategories.take(5)) {
        buffer.writeln(
            '‚Ä¢ ${_stringCategoryToDisplayName(entry.key)}: ${_formatMoney(entry.value)}');
      }
    }

    if (recentTransactions.isNotEmpty) {
      buffer.writeln('\nüïê GIAO D·ªäCH G·∫¶N ƒê√ÇY:');
      for (final transaction in recentTransactions) {
        final daysDiff = now.difference(transaction.date).inDays;
        String timeDesc;
        if (daysDiff == 0)
          timeDesc = 'H√¥m nay';
        else if (daysDiff == 1)
          timeDesc = 'H√¥m qua';
        else
          timeDesc = '${daysDiff} ng√†y tr∆∞·ªõc';

        final type = transaction.incomeType == IncomeType.none ? 'Chi' : 'Thu';
        buffer.writeln(
            '‚Ä¢ $timeDesc: $type ${_formatMoney(transaction.amount)} - ${transaction.title}');
      }
    }

    return buffer.toString();
  }

  String _formatMoney(double amount) {
    if (amount >= 1000000) {
      return '${(amount / 1000000).toStringAsFixed(1)}M';
    } else if (amount >= 1000) {
      return '${(amount / 1000).toStringAsFixed(0)}K';
    } else {
      return '${amount.toStringAsFixed(0)}ƒë';
    }
  }

  String _formatTaskData(List<TaskModel> tasks) {
    if (tasks.isEmpty) return 'Ch∆∞a c√≥ c√¥ng vi·ªác n√†o';

    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final tomorrow = today.add(Duration(days: 1));
    final thisWeekStart = today.subtract(Duration(days: now.weekday - 1));
    final thisWeekEnd = thisWeekStart.add(Duration(days: 6));

    final todayTasks = tasks.where((t) {
      final dueDate = DateTime(t.dueDate.year, t.dueDate.month, t.dueDate.day);
      return dueDate.isAtSameMomentAs(today);
    }).toList();

    final tomorrowTasks = tasks.where((t) {
      final dueDate = DateTime(t.dueDate.year, t.dueDate.month, t.dueDate.day);
      return dueDate.isAtSameMomentAs(tomorrow);
    }).toList();

    final thisWeekTasks = tasks.where((t) {
      final dueDate = DateTime(t.dueDate.year, t.dueDate.month, t.dueDate.day);
      return dueDate.isAfter(thisWeekStart.subtract(Duration(days: 1))) &&
          dueDate.isBefore(thisWeekEnd.add(Duration(days: 1)));
    }).toList();

    final overdueTasks = tasks.where((t) {
      final dueDate = DateTime(t.dueDate.year, t.dueDate.month, t.dueDate.day);
      return dueDate.isBefore(today) && !t.isCompleted;
    }).toList();

    final completedTasks = tasks.where((t) => t.isCompleted).toList();
    final pendingTasks = tasks.where((t) => !t.isCompleted).toList();

    final thisMonthCreated = tasks
        .where((t) =>
            t.createdAt.month == now.month && t.createdAt.year == now.year)
        .toList();

    final buffer = StringBuffer();

    buffer.writeln('üìä T·ªîNG QUAN C√îNG VI·ªÜC:');
    buffer.writeln(
        '‚Ä¢ T·ªïng s·ªë: ${tasks.length} (Ho√†n th√†nh: ${completedTasks.length}, C√≤n l·∫°i: ${pendingTasks.length})');
    buffer.writeln(
        '‚Ä¢ T·ª∑ l·ªá ho√†n th√†nh: ${tasks.isNotEmpty ? (completedTasks.length / tasks.length * 100).toStringAsFixed(1) : 0}%');

    buffer.writeln('\nüìÖ THEO TH·ªúI GIAN:');

    if (overdueTasks.isNotEmpty) {
      buffer.writeln('‚ö†Ô∏è Qu√° h·∫°n: ${overdueTasks.length} task');
      for (final task in overdueTasks.take(3)) {
        final daysDiff = today
            .difference(DateTime(
                task.dueDate.year, task.dueDate.month, task.dueDate.day))
            .inDays;
        buffer.writeln('  - ${task.title} (Tr·ªÖ ${daysDiff} ng√†y)');
      }
      if (overdueTasks.length > 3) {
        buffer.writeln('  ... v√† ${overdueTasks.length - 3} task kh√°c');
      }
    }

    if (todayTasks.isNotEmpty) {
      buffer.writeln(
          'üìå H√¥m nay (${now.day}/${now.month}): ${todayTasks.length} task');
      final todayCompleted = todayTasks.where((t) => t.isCompleted).length;
      buffer.writeln('  - Ho√†n th√†nh: $todayCompleted/${todayTasks.length}');
      for (final task in todayTasks.where((t) => !t.isCompleted).take(3)) {
        buffer.writeln(
            '  - ‚è≥ ${task.title} (${_stringCategoryToDisplayName(task.category)})');
      }
    } else {
      buffer.writeln('üìå H√¥m nay: Kh√¥ng c√≥ task n√†o');
    }

    if (tomorrowTasks.isNotEmpty) {
      buffer.writeln('üìÖ Ng√†y mai: ${tomorrowTasks.length} task');
      for (final task in tomorrowTasks.take(3)) {
        final status = task.isCompleted ? '‚úÖ' : '‚è≥';
        buffer.writeln('  - $status ${task.title}');
      }
    }

    if (thisWeekTasks.isNotEmpty) {
      final weekCompleted = thisWeekTasks.where((t) => t.isCompleted).length;
      buffer.writeln(
          'üìÜ Tu·∫ßn n√†y: ${thisWeekTasks.length} task (Ho√†n th√†nh: $weekCompleted)');
    }

    final categories = <String, int>{};
    final categoryCompleted = <String, int>{};

    for (var task in thisMonthCreated) {
      categories[task.category] = (categories[task.category] ?? 0) + 1;
      if (task.isCompleted) {
        categoryCompleted[task.category] =
            (categoryCompleted[task.category] ?? 0) + 1;
      }
    }

    if (categories.isNotEmpty) {
      buffer.writeln('\nüìã THEO DANH M·ª§C (Th√°ng n√†y):');
      for (final entry in categories.entries) {
        final completed = categoryCompleted[entry.key] ?? 0;
        final total = entry.value;
        final percent =
            total > 0 ? (completed / total * 100).toStringAsFixed(0) : '0';
        buffer.writeln(
            '‚Ä¢ ${_stringCategoryToDisplayName(entry.key)}: $completed/$total ($percent%)');
      }
    }

    final recentCompleted = completedTasks
        .where((t) => now.difference(t.createdAt).inDays <= 7)
        .take(3)
        .toList();

    if (recentCompleted.isNotEmpty) {
      buffer.writeln('\n‚úÖ HO√ÄN TH√ÄNH G·∫¶N ƒê√ÇY:');
      for (final task in recentCompleted) {
        final daysDiff = now.difference(task.createdAt).inDays;
        final timeDesc = daysDiff == 0
            ? 'H√¥m nay'
            : daysDiff == 1
                ? 'H√¥m qua'
                : '$daysDiff ng√†y tr∆∞·ªõc';
        buffer.writeln('‚Ä¢ $timeDesc: ${task.title}');
      }
    }

    return buffer.toString();
  }

  String _getTimeContext(int hour, int dayOfWeek) {
    final weekdays = [
      '',
      'Th·ª© 2',
      'Th·ª© 3',
      'Th·ª© 4',
      'Th·ª© 5',
      'Th·ª© 6',
      'Th·ª© 7',
      'Ch·ªß nh·∫≠t'
    ];
    final timeOfDay = hour < 12
        ? 's√°ng'
        : hour < 18
            ? 'chi·ªÅu'
            : 't·ªëi';

    return '${weekdays[dayOfWeek]} $timeOfDay (${hour}h)';
  }

  String _stringCategoryToDisplayName(String categoryString) {
    try {
      final category = Category.values.firstWhere(
        (c) => c.name == categoryString,
        orElse: () => Category.other,
      );
      return categoryToString(category);
    } catch (e) {
      return categoryString.isEmpty ? 'Kh√°c' : categoryString;
    }
  }

  Future<String> getChatResponse(String prompt) async {
    return _executeWithRetry(() async {
      final contextData = _buildUserContext();

      final enhancedPrompt = '''
        B·∫°n l√† AI Assistant th√¥ng minh cho ·ª©ng d·ª•ng qu·∫£n l√Ω t√†i ch√≠nh v√† c√¥ng vi·ªác.

        NG·ªÆ C·∫¢NH NG∆Ø·ªúI D√ôNG:
        $contextData

        C√ÇU H·ªéI NG∆Ø·ªúI D√ôNG: $prompt

        H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n ng·ªØ c·∫£nh tr√™n. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn:
        - Chi ti√™u/thu nh·∫≠p: S·ª≠ d·ª•ng d·ªØ li·ªáu expense ƒë·ªÉ ph√¢n t√≠ch v√† ƒë∆∞a ra g·ª£i √Ω c·ª• th·ªÉ
        - C√¥ng vi·ªác/task: S·ª≠ d·ª•ng d·ªØ li·ªáu task ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n v·ªÅ qu·∫£n l√Ω th·ªùi gian
        - Ng√¢n s√°ch: S·ª≠ d·ª•ng d·ªØ li·ªáu budget ƒë·ªÉ ƒë√°nh gi√° t√¨nh h√¨nh t√†i ch√≠nh
        - C√¢u h·ªèi chung: K·∫øt h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n to√†n di·ªán

        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, th·ª±c t·∫ø v√† h·ªØu √≠ch. S·ª≠ d·ª•ng emoji ph√π h·ª£p.
        ''';

      final content = [Content.text(enhancedPrompt)];
      final response = await _model.generateContent(content);

      return response.text ??
          'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.';
    }, 'tr√≤ chuy·ªán AI');
  }

  String _buildUserContext() {
    final context = StringBuffer();

    final now = DateTime.now();
    context.writeln(
        'üìÖ Th·ªùi gian hi·ªán t·∫°i: ${now.day}/${now.month}/${now.year} - ${now.hour}:${now.minute.toString().padLeft(2, '0')}');

    if (_taskController != null && _taskController!.tasks.isNotEmpty) {
      context.writeln('\nüìã C√îNG VI·ªÜC:');
      context.writeln(_formatTaskData(_taskController!.tasks));
    } else {
      context.writeln('\nüìã C√îNG VI·ªÜC: Ch∆∞a c√≥ task n√†o ƒë∆∞·ª£c t·∫°o');
    }

    if (_expenseController != null && _expenseController!.expenses.isNotEmpty) {
      context.writeln('\nüí∞ CHI TI√äU/THU NH·∫¨P:');
      context.writeln(_formatExpenseData(_expenseController!.expenses));

      final today = DateTime(now.year, now.month, now.day);
      final todayExpenses = _expenseController!.expenses.where((e) {
        final expenseDate = DateTime(e.date.year, e.date.month, e.date.day);
        return expenseDate.isAtSameMomentAs(today);
      }).toList();
      print('üîç Today expenses: ${todayExpenses.length}');
    } else {
      context.writeln('\nüí∞ CHI TI√äU/THU NH·∫¨P: Ch∆∞a c√≥ d·ªØ li·ªáu chi ti√™u');
    }

    if (_budgetController != null && _budgetController!.budgets.isNotEmpty) {
      context.writeln('\nüéØ NG√ÇN S√ÅCH:');
      context.writeln(_formatBudgetSummary(_budgetController!.budgets));
    } else {
      context.writeln('\nüéØ NG√ÇN S√ÅCH: Ch∆∞a c√≥ ng√¢n s√°ch n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p');
    }

    return context.toString();
  }

  String _formatBudgetSummary(List<BudgetModel> budgets) {
    final now = DateTime.now();
    final activeBudgets = budgets.where((b) {
      return b.startDate.isBefore(now) && b.endDate.isAfter(now);
    }).toList();

    final expiredBudgets = budgets.where((b) {
      return b.endDate.isBefore(now);
    }).toList();

    final upcomingBudgets = budgets.where((b) {
      return b.startDate.isAfter(now);
    }).toList();

    final buffer = StringBuffer();

    if (activeBudgets.isEmpty &&
        expiredBudgets.isEmpty &&
        upcomingBudgets.isEmpty) {
      return '- Kh√¥ng c√≥ ng√¢n s√°ch n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p';
    }

    if (activeBudgets.isNotEmpty) {
      buffer.writeln('üí∞ NG√ÇN S√ÅCH ƒêANG HO·∫†T ƒê·ªòNG: ${activeBudgets.length}');

      for (final budget in activeBudgets) {
        final percentage = budget.amount > 0
            ? (budget.spentAmount / budget.amount * 100)
            : 0.0;
        final remaining = budget.amount - budget.spentAmount;
        final daysLeft = budget.endDate.difference(now).inDays;

        String statusIcon;
        String statusText;
        if (percentage >= 90) {
          statusIcon = 'üî¥';
          statusText = 'Nguy hi·ªÉm';
        } else if (percentage >= 70) {
          statusIcon = 'üü°';
          statusText = 'C·∫£nh b√°o';
        } else {
          statusIcon = 'üü¢';
          statusText = 'An to√†n';
        }

        buffer.writeln('‚Ä¢ $statusIcon ${budget.name} ($statusText):');
        buffer.writeln(
            '  - ƒê√£ d√πng: ${_formatMoney(budget.spentAmount)}/${_formatMoney(budget.amount)} (${percentage.toStringAsFixed(1)}%)');
        buffer.writeln('  - C√≤n l·∫°i: ${_formatMoney(remaining)}');
        buffer.writeln(
            '  - Th·ªùi gian: ${daysLeft} ng√†y (ƒë·∫øn ${budget.endDate.day}/${budget.endDate.month})');

        if (daysLeft > 0 && remaining > 0) {
          final dailyLimit = remaining / daysLeft;
          buffer.writeln('  - Gi·ªõi h·∫°n/ng√†y: ${_formatMoney(dailyLimit)}');
        }
        buffer.writeln('');
      }
    }

    if (expiredBudgets.isNotEmpty) {
      final recentExpired = expiredBudgets
          .where((b) => now.difference(b.endDate).inDays <= 30)
          .take(2)
          .toList();

      if (recentExpired.isNotEmpty) {
        buffer.writeln('üìä NG√ÇN S√ÅCH V·ª™A K·∫æT TH√öC:');
        for (final budget in recentExpired) {
          final percentage = budget.amount > 0
              ? (budget.spentAmount / budget.amount * 100)
              : 0.0;
          final daysAgo = now.difference(budget.endDate).inDays;
          final resultIcon = percentage <= 100 ? '‚úÖ' : '‚ùå';
          buffer.writeln(
              '‚Ä¢ $resultIcon ${budget.name} (${daysAgo} ng√†y tr∆∞·ªõc): ${percentage.toStringAsFixed(1)}%');
        }
        buffer.writeln('');
      }
    }

    if (upcomingBudgets.isNotEmpty) {
      final soonStarting = upcomingBudgets
          .where((b) => b.startDate.difference(now).inDays <= 7)
          .take(2)
          .toList();

      if (soonStarting.isNotEmpty) {
        buffer.writeln('ÔøΩ NG√ÇN S√ÅCH S·∫ÆP HO·∫†T ƒê·ªòNG:');
        for (final budget in soonStarting) {
          final daysUntil = budget.startDate.difference(now).inDays;
          buffer.writeln(
              '‚Ä¢ ${budget.name}: ${_formatMoney(budget.amount)} (${daysUntil} ng√†y n·ªØa)');
        }
        buffer.writeln('');
      }
    }

    if (activeBudgets.isNotEmpty) {
      final totalBudget = activeBudgets.fold(0.0, (sum, b) => sum + b.amount);
      final totalSpent =
          activeBudgets.fold(0.0, (sum, b) => sum + b.spentAmount);
      final totalRemaining = totalBudget - totalSpent;
      final overallPercentage =
          totalBudget > 0 ? (totalSpent / totalBudget * 100) : 0.0;

      buffer.writeln('üìà T·ªîNG QUAN:');
      buffer.writeln('‚Ä¢ T·ªïng ng√¢n s√°ch: ${_formatMoney(totalBudget)}');
      buffer.writeln(
          '‚Ä¢ ƒê√£ chi ti√™u: ${_formatMoney(totalSpent)} (${overallPercentage.toStringAsFixed(1)}%)');
      buffer.writeln('‚Ä¢ C√≤n l·∫°i: ${_formatMoney(totalRemaining)}');
    }

    return buffer.toString();
  }

  Future<String> _executeWithRetry(
      Future<String> Function() operation, String operationName,
      {int maxRetries = 3}) async {
    for (int attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        print('üîÑ Th·ª±c hi·ªán $operationName (l·∫ßn th·ª≠ $attempt/$maxRetries)');
        return await operation();
      } catch (e) {
        print('‚ùå L·ªói l·∫ßn th·ª≠ $attempt: ${e.toString()}');

        if (e.toString().contains('503') ||
            e.toString().contains('UNAVAILABLE')) {
          if (attempt < maxRetries) {
            final waitTime = attempt * 2;
            print('‚è≥ ƒê·ª£i ${waitTime}s tr∆∞·ªõc khi th·ª≠ l·∫°i...');
            await Future.delayed(Duration(seconds: waitTime));
            continue;
          } else {
            return 'D·ªãch v·ª• AI hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t. ‚ö†Ô∏è\n\nC√≥ th·ªÉ do:\n- Server Google ƒëang b·∫≠n\n- V∆∞·ª£t qu√° gi·ªõi h·∫°n API\n- S·ª± c·ªë m·∫°ng t·∫°m th·ªùi';
          }
        }

        if (e.toString().contains('429') || e.toString().contains('quota')) {
          return 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng AI. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t. üïê';
        }

        if (e.toString().contains('401') ||
            e.toString().contains('authentication')) {
          return 'L·ªói x√°c th·ª±c API. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh API key. üîë';
        }

        return 'L·ªói khi $operationName: ${_getErrorMessage(e)} üòî';
      }
    }

    return 'Kh√¥ng th·ªÉ th·ª±c hi·ªán $operationName sau $maxRetries l·∫ßn th·ª≠.';
  }

  String _getErrorMessage(dynamic error) {
    final errorStr = error.toString().toLowerCase();
    if (errorStr.contains('network') || errorStr.contains('connection')) {
      return 'V·∫•n ƒë·ªÅ k·∫øt n·ªëi m·∫°ng';
    } else if (errorStr.contains('timeout')) {
      return 'H·∫øt th·ªùi gian ch·ªù';
    } else if (errorStr.contains('server')) {
      return 'L·ªói m√°y ch·ªß';
    }
    return 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
  }
}
